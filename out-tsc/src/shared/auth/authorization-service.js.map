{"version":3,"file":"authorization-service.js","sourceRoot":"","sources":["../../../../src/shared/auth/authorization-service.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,oBAAoB;IAAjC;QACmB,QAAG,GAAG,KAAK,CAAC;IAiB/B,CAAC;IAfQ,YAAY;QACjB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;YACxB,iBAAiB;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,QAAQ;QACN,OAAO,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;CACF","sourcesContent":["export class AuthorizationService {\r\n  private readonly key = 'key';\r\n\r\n  public isAuthorized(): Promise<boolean> {\r\n    const token = this.getToken();\r\n    return new Promise((resolve, reject) => {\r\n      resolve(token !== null);\r\n      // resolve(true);\r\n    });\r\n  }\r\n\r\n  setToken(token: string): void {\r\n    localStorage.setItem(this.key, token);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.key);\r\n  }\r\n}\r\n"]}