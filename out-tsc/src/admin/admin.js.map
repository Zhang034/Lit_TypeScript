{"version":3,"file":"admin.js","sourceRoot":"","sources":["../../../src/admin/admin.ts"],"names":[],"mappings":";AAOA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAExE,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAGlC,IAAa,KAAK,GAAlB,MAAa,KAAM,SAAQ,UAAU;IAGnC,MAAM;QACJ,OAAO,IAAI,CAAA;;mBAEI,IAAI,CAAC,QAAQ;;0BAEN,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;KAChD,CAAC;IACJ,CAAC;IAEM,aAAa,CAClB,QAAwB,EACxB,QAAoC,EACpC,MAAc;QAEd,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;YACxB,iBAAiB;YACjB,iCAAiC;YAEjC,kBAAkB;YAClB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,UAAU,CAAC,GAAG,EAAE;oBACd,wDAAwD;oBACxD,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClC,CAAC,EAAE,IAAI,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;SACJ;QAED,wCAAwC;IAC1C,CAAC;IAEM,YAAY,CACjB,QAAwB,EACxB,QAAoC,EACpC,MAAc;QAEd,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5B,uBAAuB;QACvB,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,yBAAyB;QAClE,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACtE,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAChC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAElC,yCAAyC;QACzC,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,MAAM,CAAC;QAEnC,8BAA8B;IAChC,CAAC;IAEM,aAAa,CAClB,QAAwB,EACxB,QAAoC,EACpC,MAAc;QAEd,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAE7B,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;QACjE,IAAI,CAAC,KAAK,EAAE;YACV,iBAAiB;YACjB,6BAA6B;YAE7B,kBAAkB;YAClB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,UAAU,CAAC,GAAG,EAAE;oBACd,wDAAwD;oBACxD,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBACxB,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC9B,CAAC,EAAE,IAAI,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAEM,YAAY,CACjB,QAAwB,EACxB,QAAoC,EACpC,MAAc;QAEd,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5B,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACvC,CAAC;IAEO,YAAY;QAClB,2DAA2D;QAC3D,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AAvF6B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;uCAAmB;AADnC,KAAK;IADjB,aAAa,CAAC,WAAW,CAAC;GACd,KAAK,CAwFjB;SAxFY,KAAK","sourcesContent":["import {\r\n  PreventAndRedirectCommands,\r\n  PreventResult,\r\n  RedirectResult,\r\n  Router,\r\n  RouterLocation,\r\n} from '@vaadin/router';\r\nimport { LitElement, html, customElement, property } from 'lit-element';\r\n\r\nimport { router } from '../index';\r\n\r\n@customElement('lit-admin')\r\nexport class Admin extends LitElement {\r\n  @property({ type: String }) username!: string;\r\n\r\n  render() {\r\n    return html`\r\n      <h2>Admin</h2>\r\n      <p>Welcome ${this.username}</p>\r\n      <p>Only for authorized users</p>\r\n      <p>Go to <a href=\"${router.urlForPath('/about')}\">About</a></p>\r\n    `;\r\n  }\r\n\r\n  public onBeforeEnter(\r\n    location: RouterLocation,\r\n    commands: PreventAndRedirectCommands,\r\n    router: Router\r\n  ): Promise<unknown> | RedirectResult | undefined {\r\n    console.log('onBeforeEnter');\r\n    if (!this.isAuthorized()) {\r\n      // sync operation\r\n      // return commands.redirect('/');\r\n\r\n      // async operation\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          // console.log('Not authorized, redirect to home page');\r\n          resolve(commands.redirect('/'));\r\n        }, 2000);\r\n      });\r\n    }\r\n\r\n    // console.log('You can see this page');\r\n  }\r\n\r\n  public onAfterEnter(\r\n    location: RouterLocation,\r\n    commands: PreventAndRedirectCommands,\r\n    router: Router\r\n  ): void {\r\n    console.log('onAfterEnter');\r\n    // Read params from URL\r\n    const section = location.params.section; // path: 'admin/:section'\r\n    const username = new URLSearchParams(location.search).get('username');\r\n    console.log('section', section);\r\n    console.log('username', username);\r\n\r\n    // Assign the username value from the URL\r\n    this.username = username || 'user';\r\n\r\n    // No need to return a result.\r\n  }\r\n\r\n  public onBeforeLeave(\r\n    location: RouterLocation,\r\n    commands: PreventAndRedirectCommands,\r\n    router: Router\r\n  ): PreventResult | Promise<unknown> | undefined {\r\n    console.log('onBeforeLeave');\r\n\r\n    const leave = window.confirm('Are you sure to leave this page?');\r\n    if (!leave) {\r\n      // sync operation\r\n      // return commands.prevent();\r\n\r\n      // async operation\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          // console.log('Not authorized, redirect to home page');\r\n          console.log('resolved');\r\n          resolve(commands.prevent());\r\n        }, 2000);\r\n      });\r\n    }\r\n  }\r\n\r\n  public onAfterLeave(\r\n    location: RouterLocation,\r\n    commands: PreventAndRedirectCommands,\r\n    router: Router\r\n  ): void {\r\n    console.log('onAfterLeave');\r\n    alert('Just wanted to say goodbye!');\r\n  }\r\n\r\n  private isAuthorized() {\r\n    // Logic to determine if the current user can see this page\r\n    return true;\r\n  }\r\n}\r\n"]}